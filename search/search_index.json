{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83d\udc09 Dungeons &amp; Dragons RAG Exploration \ud83c\udfb2 <p>Exploring RAG techniques to create intelligent D&amp;D assistants</p> <p></p>"},{"location":"#welcome-to-the-dd-rag-research-project","title":"Welcome to the D&amp;D RAG Research Project","text":"<p>This comprehensive project explores advanced Retrieval-Augmented Generation (RAG) techniques applied to Dungeons &amp; Dragons content, including rulebooks, lore, and game mechanics. Our goal is to create an intelligent D&amp;D assistant capable of understanding complex queries about game rules, character mechanics, and strategic gameplay.</p>"},{"location":"#project-goals","title":"\ud83c\udfaf Project Goals","text":"<ul> <li>Intelligent Query Understanding: Build systems that can parse complex D&amp;D-related questions</li> <li>Accurate Information Retrieval: Implement advanced techniques to find the most relevant game content</li> <li>Context-Aware Responses: Generate answers that consider campaign context and player experience levels</li> <li>Multi-Modal Knowledge: Integrate rules, lore, statistics, and strategic advice</li> </ul>"},{"location":"#research-focus-areas","title":"\ud83d\udd2c Research Focus Areas","text":"<p>Our research spans multiple cutting-edge areas in AI and information retrieval:</p>"},{"location":"#core-rag-optimization","title":"Core RAG Optimization","text":"<p>Experimenting with chunk sizes, embedding models, and retrieval methods optimized for D&amp;D content.</p>"},{"location":"#advanced-retrieval-methods","title":"Advanced Retrieval Methods","text":"<p>Exploring query expansion, agentic tool use, and interactive retrieval for complex multi-step questions.</p>"},{"location":"#knowledge-representation","title":"Knowledge Representation","text":"<p>Building graph-based systems and temporal knowledge graphs to capture D&amp;D's interconnected mechanics.</p>"},{"location":"#ai-agent-capabilities","title":"AI Agent Capabilities","text":"<p>Implementing long-term memory and persistent context for ongoing campaign assistance.</p>"},{"location":"#uncertainty-and-reasoning","title":"Uncertainty and Reasoning","text":"<p>Developing confidence scoring, causal inference, and theory of mind modeling for more intelligent interactions.</p>"},{"location":"#why-dd-for-rag-research","title":"\ud83c\udfb2 Why D&amp;D for RAG Research?","text":"<p>Dungeons &amp; Dragons provides an ideal testbed for advanced RAG techniques because:</p> <ul> <li>Complex Domain Knowledge: Rich interconnected rules, lore, and mechanics</li> <li>Ambiguous Queries: Players often ask questions without precise terminology</li> <li>Multi-Step Reasoning: Many questions require synthesizing information from multiple sources</li> <li>Temporal Dynamics: Game narratives unfold over time, requiring understanding of story progression and cause-and-effect relationships</li> <li>Contextual Personalization: Each campaign has unique house rules, character builds, and narrative contexts that demand adaptive responses</li> </ul>"},{"location":"contributing/","title":"Contributing to D&amp;D RAG Exploration","text":"<p>We welcome contributions to the D&amp;D RAG Exploration project! Whether you're interested in improving existing techniques, exploring new research directions, or enhancing documentation, there are many ways to get involved.</p>"},{"location":"contributing/#ways-to-contribute","title":"\ud83e\udd1d Ways to Contribute","text":""},{"location":"contributing/#research-contributions","title":"Research Contributions","text":"<ul> <li>New RAG Techniques: Implement and evaluate novel retrieval or generation methods</li> <li>D&amp;D-Specific Optimizations: Develop techniques tailored to tabletop gaming content</li> <li>Evaluation Frameworks: Create new metrics for assessing RAG performance on D&amp;D queries</li> <li>Comparative Studies: Benchmark different approaches on D&amp;D-specific tasks</li> </ul>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<ul> <li>Core Library Features: Enhance the main RAG pipeline and components</li> <li>Agent Capabilities: Expand the intelligent agent system</li> <li>Graph Database: Improve knowledge graph construction and querying</li> <li>User Interface: Develop web interfaces or CLI tools</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Research Documentation: Explain techniques and findings clearly</li> <li>Tutorials: Create step-by-step guides for new users</li> <li>API Documentation: Document code interfaces and usage</li> <li>Examples: Provide practical examples and use cases</li> </ul>"},{"location":"contributing/#data-and-evaluation","title":"Data and Evaluation","text":"<ul> <li>Query Datasets: Curate realistic D&amp;D questions for evaluation</li> <li>Gold Standard Answers: Create reference answers for benchmarking</li> <li>User Studies: Design and conduct evaluations with real D&amp;D players</li> <li>Performance Benchmarks: Establish baseline metrics for comparison</li> </ul> <p>Thank you for your interest in contributing! Every contribution, no matter how small, helps advance the state of AI for tabletop gaming. \ud83c\udfb2\u2728</p>"},{"location":"legal/","title":"License and Legal Information","text":""},{"location":"legal/#project-license","title":"\ud83d\udcc4 Project License","text":"<p>Copyright 2025 Marvin Strangfeld</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"legal/#dd-content-attribution","title":"\ud83c\udfb2 D&amp;D Content Attribution","text":""},{"location":"legal/#system-reference-document-srd","title":"System Reference Document (SRD)","text":"<p>This work includes material taken from the System Reference Document 5.2.1 (\"SRD 5.2.1\") by Wizards of the Coast LLC. The SRD 5.2.1 is licensed under the Creative Commons Attribution 4.0 International License.</p> <p>To view a copy of this license, visit: http://creativecommons.org/licenses/by/4.0/</p>"},{"location":"legal/#legal-disclaimers","title":"\u2696\ufe0f Legal Disclaimers","text":""},{"location":"legal/#no-affiliation","title":"No Affiliation","text":"<p>I am not affiliated with Dungeons &amp; Dragons or Wizards of The Coast in any way.</p> <p>This is an independent research project that uses publicly available content under appropriate licenses.</p>"},{"location":"legal/#research-and-educational-use","title":"Research and Educational Use","text":"<p>This project is created for:</p> <ul> <li>Academic research in artificial intelligence and natural language processing</li> <li>Educational purposes to advance understanding of RAG techniques</li> <li>Open source development to benefit the broader AI community</li> <li>Non-commercial use focused on research and learning</li> </ul>"},{"location":"legal/#trademark-acknowledgments","title":"Trademark Acknowledgments","text":"<ul> <li>Dungeons &amp; Dragons is a trademark of Wizards of the Coast LLC</li> <li>Other product and company names may be trademarks of their respective owners</li> </ul>"},{"location":"legal/#third-party-dependencies","title":"\ud83d\udd17 Third-Party Dependencies","text":"<p>This project uses several open-source libraries and tools: For a complete list of dependencies, see the <code>pyproject.toml</code> file.</p>"},{"location":"legal/#content-usage-guidelines","title":"\ud83d\udcdd Content Usage Guidelines","text":""},{"location":"legal/#for-researchers-and-developers","title":"For Researchers and Developers","text":"<p>You are free to:</p> <ul> <li>Use this code for research and educational purposes</li> <li>Modify the code for your own projects</li> <li>Distribute modified versions under the same license</li> <li>Contribute improvements back to the project</li> </ul> <p>You must:</p> <ul> <li>Maintain proper attribution to original authors</li> <li>Include the Apache License 2.0 in any distributions</li> <li>Respect the Creative Commons license for D&amp;D content</li> <li>Attribute Wizards of the Coast for SRD content</li> </ul>"},{"location":"legal/#for-content-creators","title":"For Content Creators","text":"<p>If you create D&amp;D content using this project:</p> <ul> <li>Attribute the SRD content properly</li> <li>Follow Creative Commons Attribution 4.0 requirements</li> <li>Don't claim ownership of SRD material</li> <li>Consider contributing improvements back to the project</li> </ul>"},{"location":"legal/#for-dmca-or-copyright-issues","title":"For DMCA or Copyright Issues","text":"<p>If you believe any content infringes on your copyright:</p> <ul> <li>Contact the project maintainer directly</li> <li>Provide specific details about the alleged infringement</li> <li>Include your contact information and a good faith statement</li> </ul>"},{"location":"legal/#license-updates","title":"\ud83d\udd04 License Updates","text":"<p>This license information is current as of the last update to this documentation. License terms may be updated to:</p> <ul> <li>Reflect changes in dependency licensing</li> <li>Address new legal requirements</li> <li>Improve clarity and compliance</li> </ul> <p>Always refer to the most current version of the LICENSE file in the project repository for the authoritative license terms.</p>"},{"location":"legal/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<p>We gratefully acknowledge:</p> <ul> <li>Wizards of the Coast LLC for making the D&amp;D SRD available under Creative Commons</li> <li>The open source community for the excellent tools and libraries we build upon</li> <li>The D&amp;D community for creating the rich content that makes this research possible</li> <li>All contributors who help improve this project</li> </ul>"},{"location":"research/","title":"\ud83d\udd2c Research","text":"<p>Welcome to the research section for the D&amp;D RAG Exploration project. This section serves as the experimental laboratory where we investigate, prototype, and validate various RAG techniques and approaches.</p>"},{"location":"research/#contributing-to-research","title":"\ud83e\udd1d Contributing to Research","text":"<p>We welcome contributions across all research areas:</p> <ul> <li>Implement New Techniques: Try novel RAG approaches on our D&amp;D dataset</li> <li>Replicate Studies: Validate findings and compare different methods</li> <li>Propose Research Questions: Identify new areas for investigation</li> <li>Share Insights: Document unexpected discoveries and failure modes</li> </ul>"},{"location":"research/00_traditional-rag/","title":"Traditional RAG","text":"<p>A foundational implementation of Retrieval-Augmented Generation (RAG).</p>"},{"location":"research/00_traditional-rag/#overview","title":"\ud83c\udfaf Overview","text":"<p>This traditional RAG implementation demonstrates the core principles of combining retrieval and generation for question-answering tasks. Using D&amp;D character data as our knowledge base, we build a system that can semantically search through game content and generate contextually relevant answers.</p>"},{"location":"research/00_traditional-rag/#the-rag-workflow","title":"\ud83d\udd04 The RAG Workflow","text":"<p>Our traditional RAG system follows a straightforward but powerful three-phase approach:</p> <pre><code>flowchart TD\n    A[\ud83d\udcda Raw Documents] --&gt; B[\ud83d\udcdd Text Splitting]\n    B --&gt; C[\ud83e\udde0 Embedding Generation]\n    C --&gt; D[\ud83d\uddc3\ufe0f Vector Database Storage]\n\n    E[\u2753 User Question] --&gt; F[\ud83d\udd0d Semantic Search]\n    F --&gt; G[\ud83d\udccb Retrieved Context]\n    G --&gt; H[\ud83e\udd16 LLM Generation]\n    H --&gt; I[\u2728 Final Answer]\n\n    D -.-&gt; F\n    E --&gt; H\n\n    subgraph \"Phase 1: Document Indexing\"\n        A\n        B\n        C\n        D\n    end\n\n    subgraph \"Phase 2: Query Processing\"\n        E\n        F\n        G\n    end\n\n    subgraph \"Phase 3: Answer Generation\"\n        H\n        I\n    end    </code></pre>"},{"location":"research/00_traditional-rag/langgraph/","title":"Traditional RAG with LangGraph","text":"<p>Welcome to your first hands-on exploration of Retrieval-Augmented Generation (RAG) using one of the most popular AI frameworks available today!</p>"},{"location":"research/00_traditional-rag/langgraph/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>In this interactive tutorial, we'll build a simple but functional RAG system from scratch using:</p> <ul> <li>LangChain for document processing and embeddings</li> <li>LangGraph for orchestrating our RAG workflow</li> <li>FastEmbed for efficient text embeddings</li> <li>Claude 3.5 Sonnet as our language model</li> </ul> <p>By the end of this notebook, you'll have a working D&amp;D assistant that can answer questions about character information using semantic search and AI generation.</p>"},{"location":"research/00_traditional-rag/langgraph/#the-rag-process","title":"\ud83d\udd04 The RAG Process","text":"<p>RAG combines two powerful AI techniques:</p> <ol> <li>Retrieval: Finding relevant information from a knowledge base</li> <li>Generation: Using an LLM to synthesize answers from retrieved context</li> </ol>"},{"location":"research/00_traditional-rag/langgraph/#step-1-document-indexing","title":"\ud83d\udcda Step 1: Document Indexing","text":"<p>The first step in any RAG system is preparing our knowledge base. We need to take our raw text data and transform it into a searchable format.</p>"},{"location":"research/00_traditional-rag/langgraph/#text-splitting-strategy","title":"\ud83d\udd27 Text Splitting Strategy","text":"<p>For effective retrieval, we need to split our documents into coherent chunks. Too large, and we lose precision; too small, and we lose context.</p> <p>We'll use Markdown Header Text Splitting because:</p> <ul> <li>\u2705 Preserves semantic structure</li> <li>\u2705 Maintains logical document boundaries</li> <li>\u2705 Keeps related information together</li> </ul> <p>Let's load our D&amp;D character data and split it into searchable chunks:</p> <pre><code>from langchain_text_splitters import MarkdownHeaderTextSplitter\n\nfile_path = \"characters.md\"\n\n# Read the content of the file\nwith open(file_path, \"r\", encoding=\"utf-8\") as f:\n    text = f.read()\n\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n]\n\n# Initialize a text splitter\ntext_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on, strip_headers=False\n)\n\ndocuments = text_splitter.split_text(text)\n\nprint(f\"Split into {len(documents)} documents.\")\n</code></pre> <pre><code>Split into 20 documents.\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#creating-semantic-representations","title":"\ud83e\udde0 Creating Semantic Representations","text":"<p>To make these text chunks semantically searchable, we need to convert them into embeddings - numerical representations that capture meaning.</p>"},{"location":"research/00_traditional-rag/langgraph/#how-embeddings-work","title":"How Embeddings Work","text":"<p>An embedding model \"compresses\" each text chunk into a high-dimensional vector space (in our case 384 dimensions). Similar concepts end up close together in this space, enabling semantic search.</p> <p>For example:</p> <ul> <li>\"Fighter class abilities\" and \"Warrior combat features\" would have similar embeddings</li> <li>\"Spellcasting rules\" and \"Magic system\" would cluster together</li> </ul> <p>We'll use FastEmbed because it is lightweight and fast on CPU. Perfect for experimentation:</p> <pre><code>from langchain_community.embeddings.fastembed import FastEmbedEmbeddings\n\nembeddings = FastEmbedEmbeddings()\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#setting-up-the-vector-database","title":"\ud83d\uddc3\ufe0f Setting Up the Vector Database","text":"<p>Now we need a place to store and search our embeddings efficiently. A vector database is optimized for similarity search in high-dimensional spaces.</p> <pre><code>from langchain_core.vectorstores import InMemoryVectorStore\n\nvector_store = InMemoryVectorStore(embeddings)\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#indexing-the-documents","title":"\u26a1 Indexing the Documents","text":"<p>Now for the magic! We'll add our text chunks to the vector store. This process automatically:</p> <ol> <li>\ud83d\udcdd Takes each document chunk</li> <li>\ud83d\udd22 Converts it to an embedding vector</li> <li>\ud83d\udcbe Stores both the text and vector for fast retrieval</li> </ol> <p>This is where the \"index\" in RAG gets built:</p> <pre><code># Index chunks\n_ = vector_store.add_documents(documents=documents)\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#step-2-retrieval-generation","title":"\ud83d\udd0d Step 2: Retrieval &amp; Generation","text":"<p>With our knowledge base indexed, we can now build the query-answering pipeline! This involves two key components:</p> <ol> <li>\ud83d\udd0d Retrieval: Finding relevant documents based on semantic similarity</li> <li>\u2728 Generation: Using an LLM to synthesize natural answers from retrieved context</li> </ol>"},{"location":"research/00_traditional-rag/langgraph/#setting-up-the-language-model","title":"\ud83e\udd16 Setting Up the Language Model","text":"<p>First, let's initialize our AI model. We'll use Claude 3.5 Sonnet.</p> <pre><code>import getpass\nimport os\n\nfrom langchain.chat_models import init_chat_model\n\nif not os.environ.get(\"ANTHROPIC_API_KEY\"):\n    os.environ[\"ANTHROPIC_API_KEY\"] = getpass.getpass(\"Enter API key for Anthropic: \")\n\nllm = init_chat_model(\"claude-3-5-sonnet-latest\", model_provider=\"anthropic\")\n</code></pre> <pre><code># Test if the model is working\nresponse = llm.invoke(\n    \"What is the name of the god that is known as the Morninglord in the Forgotten Realms setting? Only respond with the name of the god, nothing else.\"\n)\nprint(response.content)\n</code></pre> <pre><code>Lathander\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#orchestrating-the-rag-pipeline","title":"\ud83d\udd17 Orchestrating the RAG Pipeline","text":"<p>Now for the exciting part - putting it all together! We'll use LangGraph to create a workflow that:</p> <ol> <li>\ud83d\udce5 Takes a user question</li> <li>\ud83d\udd0d Retrieves relevant document chunks</li> <li>\ud83e\udd16 Generates an answer using the retrieved context</li> <li>\ud83d\udce4 Returns the final response</li> </ol> <pre><code>from langchain_core.documents import Document\nfrom langgraph.graph import START, StateGraph\nfrom typing_extensions import List, TypedDict\nfrom langchain_core.prompts import PromptTemplate\n\nprompt = PromptTemplate.from_template(\"\"\"\n        You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.\n        Question: {question} \n        Context: {context} \n        Answer:\n    \"\"\")\n\n\n# Define state for application\nclass State(TypedDict):\n    question: str\n    context: List[Document]\n    answer: str\n\n\n# Define application steps\ndef retrieve(state: State):\n    retrieved_docs = vector_store.similarity_search(state[\"question\"])\n    return {\"context\": retrieved_docs}\n\n\ndef generate(state: State):\n    docs_content = \"\\n\\n\".join(doc.page_content for doc in state[\"context\"])\n    messages = prompt.invoke({\"question\": state[\"question\"], \"context\": docs_content})\n    response = llm.invoke(messages)\n    return {\"answer\": response.content}\n\n\n# Compile application and test\ngraph_builder = StateGraph(State).add_sequence([retrieve, generate])\ngraph_builder.add_edge(START, \"retrieve\")\ngraph = graph_builder.compile()\n</code></pre>"},{"location":"research/00_traditional-rag/langgraph/#step-3-testing-our-rag-system","title":"\ud83e\uddea Step 3: Testing Our RAG System","text":"<p>Time to see our D&amp;D assistant in action! Let's test it with a question about our characters:</p> <pre><code>response = graph.invoke({\"question\": \"Who is Tiamat?\"})\nprint(response[\"answer\"])\n</code></pre> <pre><code>Tiamat is the five-headed chromatic dragon goddess of evil who rules over Avernus. She appears as both a deity and a powerful endgame boss in various D&amp;D settings including Dragonlance and Forgotten Realms.\n</code></pre>"}]}